# https://leetcode.cn/problems/minimum-path-sum/
import sys
from typing import List


class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        m = len(grid)
        n = len(grid[0])
        dp = [[] for i in range(m)]
        dp[0].append(grid[0][0])
        for i in range(m):
            for j in range(n):
                if i == 0 and j == 0:
                    continue
                x = dp[i-1][j] if i > 0 else sys.maxsize
                y = dp[i][j-1] if j > 0 else sys.maxsize
                dp[i].append(min(x,y)+grid[i][j]) 
        # print(dp)
        return dp[-1][-1]
    
sol = Solution()
sol.minPathSum